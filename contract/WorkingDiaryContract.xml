<?xml version="1.0" encoding="UTF-8"?>

<CSpec>
    <stype>1</stype>
    <idPath></idPath>
    <idName></idName>
    <iptFunc></iptFunc>
    <iptArgs>
    </iptArgs>
    <timeout>0</timeout>
    <secureContext>string</secureContext>
    <code>
        <![CDATA[
import java.text.SimpleDateFormat
import java.util.Date
import org.json4s._
import org.json4s.jackson.JsonMethods._
import rep.sc.contract._

/**
 * Smart Contract for workingdiary application
 */

class WorkingDiaryContract extends IContract{
    case class ReplaceCert(newPemCert:String, oldCertAddr:String)
    case class Diary(userName:String, text:String, creditAccount:String)
    case class Register(userName:String, pemCert:String, certInfo:String)

    val CREDIT = "CREDIT_"
    val DIARY = "DIARY_"
    implicit val formats = DefaultFormats

    def init(ctx: ContractContext){
        println(s"tid: $ctx.t.txid")
    }

    /**
      * 证书入链
      * @param ctx
      * @param data
      * @return
      */
    def signCert(ctx: ContractContext, data:Map[String,String]):Object = {
        var addr = ""
        for((k,v)<-data){
            ctx.api.check(ctx.t.cert.toStringUtf8,ctx.t)
            addr = ctx.api.signup(k,v)
        }
        addr
    }

    /**
      * get currentTime(yymmdd)
      * @return
      */
    def getDay():String={
        var now:Date = new Date()
        var  dateFormat:SimpleDateFormat = new SimpleDateFormat("yyyyMMdd")
        var day = dateFormat.format(now)
        day
    }

    /**
      * 创建积分账户:CREDIT + userName.toUpperCase + "_" + ctx.t.cert.toStringUtf8.toUpperCase
      * @param ctx
      * @param userName
      * @return
      */
    def createCreditAccount(ctx: ContractContext, userName:String) = {
        val creditAccount = CREDIT + userName.toUpperCase + "_" + ctx.t.cert.toStringUtf8.toUpperCase
        if (isAccountExist(ctx, creditAccount)){
            new Exception("账户（"+userName+")已在区块链中")
        } else {
            ctx.api.setVal(userName, creditAccount)
            ctx.api.setVal(creditAccount,0)
        }
    }

    /**
      * 用户注册，利用节点的签名将用户的证书写入RepChain worldstate
      * @param ctx  合约上下文
      * @param data case UserRegister
      * @return
      */
    def register(ctx: ContractContext, data:Register):Object = {
        val pemCert = data.pemCert
        val certInfo = data.certInfo
        var map = Map.empty[String, String]
        map -> (pemCert, certInfo)
        val addr = signCert(ctx, map)
        createCreditAccount(ctx, data.userName)
        addr
    }

    def isAccountExist(ctx: ContractContext, account:String):Boolean = {
        var exist:Boolean = false
        val v = ctx.api.getVal(account)
        if (v != null && v != None){
            exist = true
        }
        exist
    }

    /**
      * 验证账户合法性
      * @param ctx
      * @param account
      * @return
      */
    def isValidAccount(ctx: ContractContext, account:String):Boolean = {
        var isValid = false
        var addr = ctx.t.cert.toStringUtf8.toUpperCase
        if (account.endsWith(addr)){
            isValid = true
        }
        isValid
    }

   /**
    * 积分操作
    * 约定：Integral.userName 是用户的真实名字全拼+用户id
    * 约定：积分账户 = INTEGRAL + userName
    */
    def addCredit(ctx: ContractContext, creditAccount:String) = {
        if (!isValidAccount(ctx, creditAccount)){
            new Exception("证书与账户不匹配")
        }
        if (!isAccountExist(ctx, creditAccount)){
            new Exception("账户不存在")
        }
        var oldCredit = ctx.api.getVal(creditAccount)
        var newCredit:Integer = 1+(oldCredit.toString.toInt)
        ctx.api.setVal(creditAccount, newCredit)
    }

    /**
      * 查询积分
      * @param ctx
      * @param creditAccount
      * @return
      */
    def queryCredit(ctx: ContractContext, creditAccount: String):Object = {
        if (!isValidAccount(ctx, creditAccount)){
            new Exception("证书与账户不匹配")
        }
        if (!isAccountExist(ctx, creditAccount)){
            new Exception("账户不存在")
        }
        ctx.api.getVal(creditAccount).toString
    }

    /**
      * 日志上链，同时增加积分
      * @param ctx
      * @param data
      * @return
      */
    def diaryProof(ctx: ContractContext, data:Diary):Object = {
        val currentDay = getDay()
        val diaryKey = DIARY + data.userName.toUpperCase + "_" +currentDay
        println(diaryKey)
        val workLog = ctx.api.getVal(diaryKey)
        println("workLog:"+workLog)
        // 方便测试，暂时放开每日提交一次限制，正式使用时放开
        /*if( workLog != None && workLog != null){
            throw new Exception("今天日志已上链")
        }*/
        addCredit(ctx, data.creditAccount)
        ctx.api.setVal(diaryKey, data.text)
        "ok"
    }


    /**
      * 查询日志
      * @param ctx
      * @param userName
      * @return
      */
    def queryDiary(ctx: ContractContext, diaryKey: String):Object = {
        ctx.api.getVal(diaryKey).toString
    }

    /**
      * 销毁证书
      * @param ctx
      * @param certAddr
      * @return
      */
    def destroyCert(ctx: ContractContext, certAddr: String): Object = {
        ctx.api.check(ctx.t.cert.toStringUtf8,ctx.t)    //ctx中自带交易内容
        ctx.api.destroyCert(certAddr);
        "scuccess"
    }

    /**
      * 更换证书
      * @param ctx
      * @param data
      * @return
      */
    def replaceCert(ctx: ContractContext, data:ReplaceCert): Object = {
        val cert = data.newPemCert
        val addr = data.oldCertAddr
        ctx.api.check(ctx.t.cert.toStringUtf8,ctx.t)
        ctx.api.replaceCert(cert,addr);   // 返回短地址
    }

    /**
    * 根据action,找到对应的method，并将传入的json字符串parse为method需要的传入参数
    */
    def onAction(ctx: ContractContext,action:String, sdata:String ):Object={
        val json = parse(sdata)

        action match {
            case "diaryProof" =>
                println(s"diaryProof")
                diaryProof(ctx, json.extract[Diary])

            case "queryDiary" =>
                println(s"queryDiary")
                queryDiary(ctx, json.extract[String])

            case "queryCredit" =>
                println(s"queryCredit")
                queryCredit(ctx, json.extract[String])

            case "register" =>
                println(s"register")
                register(ctx, json.extract[Register])

            case "destroyCert" =>
                println(s"destroyCert")
                destroyCert(ctx, json.extract[String])

            case "replaceCert" =>
                println(s"replaceCert")
                replaceCert(ctx, json.extract[ReplaceCert])
        }
    }
}
]]>
    </code>
    <ctype>1</ctype>
</CSpec>